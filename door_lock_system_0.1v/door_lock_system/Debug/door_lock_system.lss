
door_lock_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000238  000002cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000238  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006c  00800108  00800108  000002d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bf7  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000992  00000000  00000000  00000fab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000458  00000000  00000000  0000193d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00001d98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e8  00000000  00000000  00001e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000201  00000000  00000000  00002384  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002585  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3f c0       	rjmp	.+126    	; 0xc8 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4a c0       	rjmp	.+148    	; 0xe6 <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e3       	ldi	r30, 0x38	; 56
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 37       	cpi	r26, 0x74	; 116
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	80 d0       	rcall	.+256    	; 0x1c4 <main>
  c4:	b7 c0       	rjmp	.+366    	; 0x234 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_18>:
int convertServoAngle(int angle)
{
	//0~180 degree
	int converted = 2000+angle*11;
	return converted;
}
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	8c b1       	in	r24, 0x0c	; 12
  d6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <RxData>
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <__vector_20>:
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	0b b6       	in	r0, 0x3b	; 59
  f2:	0f 92       	push	r0
  f4:	8f 93       	push	r24
  f6:	af 93       	push	r26
  f8:	bf 93       	push	r27
  fa:	ef 93       	push	r30
  fc:	ff 93       	push	r31
  fe:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <u0+0x66>
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	e5 5f       	subi	r30, 0xF5	; 245
 106:	fe 4f       	sbci	r31, 0xFE	; 254
 108:	83 a9       	ldd	r24, Z+51	; 0x33
 10a:	81 11       	cpse	r24, r1
 10c:	02 c0       	rjmp	.+4      	; 0x112 <__vector_20+0x2c>
 10e:	56 98       	cbi	0x0a, 6	; 10
 110:	0b c0       	rjmp	.+22     	; 0x128 <__vector_20+0x42>
 112:	a1 e7       	ldi	r26, 0x71	; 113
 114:	b1 e0       	ldi	r27, 0x01	; 1
 116:	ec 91       	ld	r30, X
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	8e 0f       	add	r24, r30
 11c:	8c 93       	st	X, r24
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	e5 5f       	subi	r30, 0xF5	; 245
 122:	fe 4f       	sbci	r31, 0xFE	; 254
 124:	83 a9       	ldd	r24, Z+51	; 0x33
 126:	8c b9       	out	0x0c, r24	; 12
 128:	ff 91       	pop	r31
 12a:	ef 91       	pop	r30
 12c:	bf 91       	pop	r27
 12e:	af 91       	pop	r26
 130:	8f 91       	pop	r24
 132:	0f 90       	pop	r0
 134:	0b be       	out	0x3b, r0	; 59
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <setOCRA>:
 140:	9b bd       	out	0x2b, r25	; 43
 142:	8a bd       	out	0x2a, r24	; 42
 144:	08 95       	ret

00000146 <UART0_Init>:


void UART0_Init(unsigned int ubrr)
{
	
	DDRE = 0b00000010;
 146:	22 e0       	ldi	r18, 0x02	; 2
 148:	22 b9       	out	0x02, r18	; 2
	//set Baud Rate
	UBRR0H= (unsigned char )(ubrr>>8);
 14a:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L= (unsigned char )(ubrr&0xff);
 14e:	89 b9       	out	0x09, r24	; 9
	
	// Tx, Rx Enabled
	UCSR0B = ((1<<TXEN0) | (1<<RXEN0));
 150:	88 e1       	ldi	r24, 0x18	; 24
 152:	8a b9       	out	0x0a, r24	; 10
	UCSR0B |= ((1<<RXCIE0)); //수신 완료 인터럽트 허용
 154:	57 9a       	sbi	0x0a, 7	; 10
	
	// Set Frame format: data 8 bit, 1 stop bit
	UCSR0C = (0<<USBS0) |(1<<UCSZ01)| (1<<UCSZ00 );
 156:	86 e0       	ldi	r24, 0x06	; 6
 158:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 15c:	08 95       	ret

0000015e <setup>:
}

void setup()
{
	//SREG |= 1<<7; 
	sei();
 15e:	78 94       	sei
	DDRB = 0xff; 
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	87 bb       	out	0x17, r24	; 23
	
	
	//UART0
	UART0_Init(MYUBRR);
 164:	87 e6       	ldi	r24, 0x67	; 103
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	ee df       	rcall	.-36     	; 0x146 <UART0_Init>
	
	//TIM0
	//16Mhz > 1024 prescailing >>15.6kHz/count >> 0.064ms >> 16.38ms(pwm period)
	TCCR0 = ((1<<CS00) | (1<< CS01) | (1<<CS02) | (1<<WGM00)|(1<<WGM01) |(1<<COM01));
 16a:	8f e6       	ldi	r24, 0x6F	; 111
 16c:	83 bf       	out	0x33, r24	; 51
	
	//TIM1
	//COM : 10 : default HIGH, compare LOW 
	//WGM : 1110 : FAST PWM, TOP:ICR1
	TCCR1A = ((1<<COM1A1)|(0<<COM1A0)|(1<<COM1B1)|(0<<COM1B0)|(1<<WGM11)|(0<<WGM10));
 16e:	82 ea       	ldi	r24, 0xA2	; 162
 170:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = ((0<<CS12)|(1<<CS11)|(0<<CS10)|(1<<WGM13)|(1<<WGM12) );
 172:	8a e1       	ldi	r24, 0x1A	; 26
 174:	8e bd       	out	0x2e, r24	; 46
	
	TCNT0=0;
 176:	12 be       	out	0x32, r1	; 50
	TCNT1H = 0;
 178:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = 0;
 17a:	1c bc       	out	0x2c, r1	; 44

void setICR(int num)
{
	//39999 == 0x9c3f
	//high write first
	ICR1H = (unsigned char)(num>>8);
 17c:	8c e9       	ldi	r24, 0x9C	; 156
 17e:	87 bd       	out	0x27, r24	; 39
	ICR1L = (unsigned char)(num&0xff);
 180:	8f e3       	ldi	r24, 0x3F	; 63
 182:	86 bd       	out	0x26, r24	; 38
 184:	08 95       	ret

00000186 <uartTx>:
	UCSR0C = (0<<USBS0) |(1<<UCSZ01)| (1<<UCSZ00 );
}

//uartTx("test");
void uartTx(char * data)
{
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
	int _len=strlen(data);
 18a:	fc 01       	movw	r30, r24
 18c:	01 90       	ld	r0, Z+
 18e:	00 20       	and	r0, r0
 190:	e9 f7       	brne	.-6      	; 0x18c <uartTx+0x6>
 192:	31 97       	sbiw	r30, 0x01	; 1
 194:	ef 01       	movw	r28, r30
 196:	c8 1b       	sub	r28, r24
 198:	d9 0b       	sbc	r29, r25
	strncpy((char*)u0.txBuf,data,_len);
 19a:	ae 01       	movw	r20, r28
 19c:	bc 01       	movw	r22, r24
 19e:	8e e3       	ldi	r24, 0x3E	; 62
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	39 d0       	rcall	.+114    	; 0x216 <strncpy>
	//cm0.txBuf[2]='s';
	//cm0.txBuf[3]='t';
	//cm0.txBuf[4]= 0 ;
	// _len = 4 >> 문자열이므로 +1해줘야 함.
	
	while(!(UCSR0A & (1<<UDRE0)));
 1a4:	5d 9b       	sbis	0x0b, 5	; 11
 1a6:	fe cf       	rjmp	.-4      	; 0x1a4 <uartTx+0x1e>
	//UDR0=data;
	UDR0=u0.txBuf[0];
 1a8:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <u0+0x33>
 1ac:	8c b9       	out	0x0c, r24	; 12
	
	u0.txCnt=1;    //ISR상에서 사용할 cnt 시작 값
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <u0+0x66>
	u0.txCntMax=_len+1; //ISR상에서 사용할 cnt max 값 (문자열 뒤에 붙는 \0도 포함)
 1b4:	ec 2f       	mov	r30, r28
 1b6:	ef 5f       	subi	r30, 0xFF	; 255
 1b8:	e0 93 72 01 	sts	0x0172, r30	; 0x800172 <u0+0x67>
	//cm0.txCntMax=5;
	UCSR0B |= 0x40; //송신완료 인터럽트 활성화
 1bc:	56 9a       	sbi	0x0a, 6	; 10
	//UCSR0A |= (1<<UDRE0);
}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <main>:



int main(void)
{
	setup();
 1c4:	cc df       	rcall	.-104    	; 0x15e <setup>
    /* Replace with your application code */
	setOCRA(convertServoAngle(360));
 1c6:	88 e4       	ldi	r24, 0x48	; 72
 1c8:	97 e1       	ldi	r25, 0x17	; 23
 1ca:	ba df       	rcall	.-140    	; 0x140 <setOCRA>

	uartTx("1");
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	da df       	rcall	.-76     	; 0x186 <uartTx>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d2:	2f e7       	ldi	r18, 0x7F	; 127
 1d4:	88 e3       	ldi	r24, 0x38	; 56
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	21 50       	subi	r18, 0x01	; 1
 1da:	80 40       	sbci	r24, 0x00	; 0
 1dc:	90 40       	sbci	r25, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <main+0x14>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <main+0x1e>
 1e2:	00 00       	nop
    while (1) 
    {
		_delay_ms(25);
		stack++;
		stack%=2;
 1e4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 1e8:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	81 70       	andi	r24, 0x01	; 1
 1f0:	90 78       	andi	r25, 0x80	; 128
 1f2:	99 23       	and	r25, r25
 1f4:	24 f4       	brge	.+8      	; 0x1fe <main+0x3a>
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	8e 6f       	ori	r24, 0xFE	; 254
 1fa:	9f 6f       	ori	r25, 0xFF	; 255
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 202:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
		if(RxData=='1')uartTx("push"); //
 206:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <RxData>
 20a:	81 33       	cpi	r24, 0x31	; 49
 20c:	11 f7       	brne	.-60     	; 0x1d2 <main+0xe>
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	b9 df       	rcall	.-142    	; 0x186 <uartTx>
 214:	de cf       	rjmp	.-68     	; 0x1d2 <main+0xe>

00000216 <strncpy>:
 216:	fb 01       	movw	r30, r22
 218:	dc 01       	movw	r26, r24
 21a:	41 50       	subi	r20, 0x01	; 1
 21c:	50 40       	sbci	r21, 0x00	; 0
 21e:	48 f0       	brcs	.+18     	; 0x232 <strncpy+0x1c>
 220:	01 90       	ld	r0, Z+
 222:	0d 92       	st	X+, r0
 224:	00 20       	and	r0, r0
 226:	c9 f7       	brne	.-14     	; 0x21a <strncpy+0x4>
 228:	01 c0       	rjmp	.+2      	; 0x22c <strncpy+0x16>
 22a:	1d 92       	st	X+, r1
 22c:	41 50       	subi	r20, 0x01	; 1
 22e:	50 40       	sbci	r21, 0x00	; 0
 230:	e0 f7       	brcc	.-8      	; 0x22a <strncpy+0x14>
 232:	08 95       	ret

00000234 <_exit>:
 234:	f8 94       	cli

00000236 <__stop_program>:
 236:	ff cf       	rjmp	.-2      	; 0x236 <__stop_program>
