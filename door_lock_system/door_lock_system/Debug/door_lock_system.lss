
door_lock_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a80  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c7  00000000  00000000  00000d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003bd  00000000  00000000  000015e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  000019a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000472  00000000  00000000  00001a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d8  00000000  00000000  00001ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001f7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	29 d0       	rcall	.+82     	; 0xfc <main>
  aa:	57 c0       	rjmp	.+174    	; 0x15a <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <setOCRA>:
int convertServoAngle(int angle)
{
	//0~180 degree
	int converted = 2000+angle*11;
	return converted;
}
  ae:	9b bd       	out	0x2b, r25	; 43
  b0:	8a bd       	out	0x2a, r24	; 42
  b2:	08 95       	ret

000000b4 <UART0_Init>:


void UART0_Init(unsigned int ubrr)
{
	//set Baud Rate
	UBRR0H= (unsigned char )(ubrr>>8);
  b4:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L= (unsigned char )(ubrr&0xff);
  b8:	89 b9       	out	0x09, r24	; 9
	
	// Tx, Rx Enabled
	UCSR0B = ((1<<TXEN0) | (1<RXEN0));
  ba:	89 e0       	ldi	r24, 0x09	; 9
  bc:	8a b9       	out	0x0a, r24	; 10
	
	// Set Frame format: data 8 bit, 1 stop bit
	UCSR0C = (0<<USBS0) |(1<<UCSZ01)| (1<<UCSZ00 );
  be:	86 e0       	ldi	r24, 0x06	; 6
  c0:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
  c4:	08 95       	ret

000000c6 <setup>:
    }
}

void setup()
{
	SREG |= 1<<7; 
  c6:	8f b7       	in	r24, 0x3f	; 63
  c8:	80 68       	ori	r24, 0x80	; 128
  ca:	8f bf       	out	0x3f, r24	; 63
	DDRB = 0xff; 
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xff;
  d0:	84 bb       	out	0x14, r24	; 20
	
	//UART0
	UART0_Init(MYUBRR);
  d2:	87 e6       	ldi	r24, 0x67	; 103
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	ee df       	rcall	.-36     	; 0xb4 <UART0_Init>
	
	//TIM0
	//16Mhz > 1024 prescailing >>15.6kHz/count >> 0.064ms >> 16.38ms(pwm period)
	TCCR0 = ((1<<CS00) | (1<< CS01) | (1<<CS02) | (1<<WGM00)|(1<<WGM01) |(1<<COM01));
  d8:	8f e6       	ldi	r24, 0x6F	; 111
  da:	83 bf       	out	0x33, r24	; 51
	
	//TIM1
	//COM : 10 : default HIGH, compare LOW 
	//WGM : 1110 : FAST PWM, TOP:ICR1
	TCCR1A = ((1<<COM1A1)|(0<<COM1A0)|(1<<COM1B1)|(0<<COM1B0)|(1<<WGM11)|(0<<WGM10));
  dc:	82 ea       	ldi	r24, 0xA2	; 162
  de:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = ((0<<CS12)|(1<<CS11)|(0<<CS10)|(1<<WGM13)|(1<<WGM12) );
  e0:	8a e1       	ldi	r24, 0x1A	; 26
  e2:	8e bd       	out	0x2e, r24	; 46
	
	TCNT0=0;
  e4:	12 be       	out	0x32, r1	; 50
	TCNT1H = 0;
  e6:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = 0;
  e8:	1c bc       	out	0x2c, r1	; 44

void setICR(int num)
{
	//39999 == 0x9c3f
	//high write first
	ICR1H = (unsigned char)(num>>8);
  ea:	8c e9       	ldi	r24, 0x9C	; 156
  ec:	87 bd       	out	0x27, r24	; 39
	ICR1L = (unsigned char)(num&0xff);
  ee:	8f e3       	ldi	r24, 0x3F	; 63
  f0:	86 bd       	out	0x26, r24	; 38
  f2:	08 95       	ret

000000f4 <uartTx>:
}


void uartTx(unsigned data)
{
	while(!(UCSR0A & (1<<UDRE0)));
  f4:	5d 9b       	sbis	0x0b, 5	; 11
  f6:	fe cf       	rjmp	.-4      	; 0xf4 <uartTx>
	UDR0=data;
  f8:	8c b9       	out	0x0c, r24	; 12
  fa:	08 95       	ret

000000fc <main>:



int main(void)
{
	setup();
  fc:	e4 df       	rcall	.-56     	; 0xc6 <setup>
    /* Replace with your application code */
	setOCRA(convertServoAngle(90));
  fe:	8e ea       	ldi	r24, 0xAE	; 174
 100:	9b e0       	ldi	r25, 0x0B	; 11
 102:	d5 df       	rcall	.-86     	; 0xae <setOCRA>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	89 e6       	ldi	r24, 0x69	; 105
 108:	98 e1       	ldi	r25, 0x18	; 24
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0xe>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x18>
 114:	00 00       	nop
	
    while (1) 
    {
		_delay_ms(500);
		
		switch(stack){
 116:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 11e:	00 97       	sbiw	r24, 0x00	; 0
 120:	19 f0       	breq	.+6      	; 0x128 <main+0x2c>
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	29 f0       	breq	.+10     	; 0x130 <main+0x34>
 126:	07 c0       	rjmp	.+14     	; 0x136 <main+0x3a>
		case 0:
			uartTx('a');
 128:	81 e6       	ldi	r24, 0x61	; 97
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	e3 df       	rcall	.-58     	; 0xf4 <uartTx>
		break;
		case 1:
			uartTx('b');
 12e:	03 c0       	rjmp	.+6      	; 0x136 <main+0x3a>
 130:	82 e6       	ldi	r24, 0x62	; 98
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	df df       	rcall	.-66     	; 0xf4 <uartTx>
		break;
		default:
		break;
		}
		stack++;
		stack%=2;
 136:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 13a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	81 70       	andi	r24, 0x01	; 1
 142:	90 78       	andi	r25, 0x80	; 128
 144:	99 23       	and	r25, r25
 146:	24 f4       	brge	.+8      	; 0x150 <main+0x54>
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	8e 6f       	ori	r24, 0xFE	; 254
 14c:	9f 6f       	ori	r25, 0xFF	; 255
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 154:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		
    }
 158:	d5 cf       	rjmp	.-86     	; 0x104 <main+0x8>

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
