
door_lock_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006b  00800100  00800100  00000244  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b5f  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000094e  00000000  00000000  00000e83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000453  00000000  00000000  000017d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00001c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cf  00000000  00000000  00001d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000183  00000000  00000000  000021df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002362  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	32 c0       	rjmp	.+100    	; 0xae <__vector_18>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	38 c0       	rjmp	.+112    	; 0xc2 <__vector_20>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ab 36       	cpi	r26, 0x6B	; 107
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	6f d0       	rcall	.+222    	; 0x188 <main>
  aa:	90 c0       	rjmp	.+288    	; 0x1cc <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_18>:
int convertServoAngle(int angle)
{
	//0~180 degree
	int converted = 2000+angle*11;
	return converted;
}
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	0f 90       	pop	r0
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	0f 90       	pop	r0
  be:	1f 90       	pop	r1
  c0:	18 95       	reti

000000c2 <__vector_20>:
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	0b b6       	in	r0, 0x3b	; 59
  ce:	0f 92       	push	r0
  d0:	8f 93       	push	r24
  d2:	ef 93       	push	r30
  d4:	ff 93       	push	r31
  d6:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <cm0+0x66>
  da:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <cm0+0x67>
  de:	e8 17       	cp	r30, r24
  e0:	10 f0       	brcs	.+4      	; 0xe6 <__vector_20+0x24>
  e2:	56 98       	cbi	0x0a, 6	; 10
  e4:	09 c0       	rjmp	.+18     	; 0xf8 <__vector_20+0x36>
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	8e 0f       	add	r24, r30
  ea:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <cm0+0x66>
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	ee 5f       	subi	r30, 0xFE	; 254
  f2:	fe 4f       	sbci	r31, 0xFE	; 254
  f4:	83 a9       	ldd	r24, Z+51	; 0x33
  f6:	8c b9       	out	0x0c, r24	; 12
  f8:	ff 91       	pop	r31
  fa:	ef 91       	pop	r30
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0b be       	out	0x3b, r0	; 59
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <setOCRA>:
 10c:	9b bd       	out	0x2b, r25	; 43
 10e:	8a bd       	out	0x2a, r24	; 42
 110:	08 95       	ret

00000112 <UART0_Init>:


void UART0_Init(unsigned int ubrr)
{
	
	DDRE = 0b00000010;
 112:	22 e0       	ldi	r18, 0x02	; 2
 114:	22 b9       	out	0x02, r18	; 2
	//set Baud Rate
	UBRR0H= (unsigned char )(ubrr>>8);
 116:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L= (unsigned char )(ubrr&0xff);
 11a:	89 b9       	out	0x09, r24	; 9
	
	// Tx, Rx Enabled
	UCSR0B = ((1<<TXEN0) | (1<RXEN0));
 11c:	89 e0       	ldi	r24, 0x09	; 9
 11e:	8a b9       	out	0x0a, r24	; 10
	
	// Set Frame format: data 8 bit, 1 stop bit
	UCSR0C = (0<<USBS0) |(1<<UCSZ01)| (1<<UCSZ00 );
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 126:	08 95       	ret

00000128 <setup>:
}

void setup()
{
	//SREG |= 1<<7; 
	sei();
 128:	78 94       	sei
	DDRB = 0xff; 
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	87 bb       	out	0x17, r24	; 23
	
	
	//UART0
	UART0_Init(MYUBRR);
 12e:	87 e6       	ldi	r24, 0x67	; 103
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	ef df       	rcall	.-34     	; 0x112 <UART0_Init>
	
	//TIM0
	//16Mhz > 1024 prescailing >>15.6kHz/count >> 0.064ms >> 16.38ms(pwm period)
	TCCR0 = ((1<<CS00) | (1<< CS01) | (1<<CS02) | (1<<WGM00)|(1<<WGM01) |(1<<COM01));
 134:	8f e6       	ldi	r24, 0x6F	; 111
 136:	83 bf       	out	0x33, r24	; 51
	
	//TIM1
	//COM : 10 : default HIGH, compare LOW 
	//WGM : 1110 : FAST PWM, TOP:ICR1
	TCCR1A = ((1<<COM1A1)|(0<<COM1A0)|(1<<COM1B1)|(0<<COM1B0)|(1<<WGM11)|(0<<WGM10));
 138:	82 ea       	ldi	r24, 0xA2	; 162
 13a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = ((0<<CS12)|(1<<CS11)|(0<<CS10)|(1<<WGM13)|(1<<WGM12) );
 13c:	8a e1       	ldi	r24, 0x1A	; 26
 13e:	8e bd       	out	0x2e, r24	; 46
	
	TCNT0=0;
 140:	12 be       	out	0x32, r1	; 50
	TCNT1H = 0;
 142:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = 0;
 144:	1c bc       	out	0x2c, r1	; 44

void setICR(int num)
{
	//39999 == 0x9c3f
	//high write first
	ICR1H = (unsigned char)(num>>8);
 146:	8c e9       	ldi	r24, 0x9C	; 156
 148:	87 bd       	out	0x27, r24	; 39
	ICR1L = (unsigned char)(num&0xff);
 14a:	8f e3       	ldi	r24, 0x3F	; 63
 14c:	86 bd       	out	0x26, r24	; 38
 14e:	08 95       	ret

00000150 <uartTx>:
}


void uartTx(unsigned data)
{
	cm0.txBuf[0]='a';
 150:	e2 e0       	ldi	r30, 0x02	; 2
 152:	f1 e0       	ldi	r31, 0x01	; 1
 154:	81 e6       	ldi	r24, 0x61	; 97
 156:	83 ab       	std	Z+51, r24	; 0x33
	cm0.txBuf[1]='b';
 158:	82 e6       	ldi	r24, 0x62	; 98
 15a:	84 ab       	std	Z+52, r24	; 0x34
	cm0.txBuf[2]='c';
 15c:	83 e6       	ldi	r24, 0x63	; 99
 15e:	85 ab       	std	Z+53, r24	; 0x35
	cm0.txBuf[3]='d';
 160:	84 e6       	ldi	r24, 0x64	; 100
 162:	86 ab       	std	Z+54, r24	; 0x36
	cm0.txBuf[4]='e';
 164:	85 e6       	ldi	r24, 0x65	; 101
 166:	87 ab       	std	Z+55, r24	; 0x37
	cm0.txBuf[5]='f';
 168:	86 e6       	ldi	r24, 0x66	; 102
 16a:	80 af       	std	Z+56, r24	; 0x38
	cm0.txBuf[6]='\n';
 16c:	8a e0       	ldi	r24, 0x0A	; 10
 16e:	81 af       	std	Z+57, r24	; 0x39
	
	while(!(UCSR0A & (1<<UDRE0)));
 170:	5d 9b       	sbis	0x0b, 5	; 11
 172:	fe cf       	rjmp	.-4      	; 0x170 <uartTx+0x20>
	//UDR0=data;
	UDR0=cm0.txBuf[0];
 174:	81 e6       	ldi	r24, 0x61	; 97
 176:	8c b9       	out	0x0c, r24	; 12
	
	cm0.txCnt=1;    //ISR상에서 사용할 cnt 시작 값
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <cm0+0x66>
	cm0.txCntMax=7; //ISR상에서 사용할 cnt max 값
 17e:	87 e0       	ldi	r24, 0x07	; 7
 180:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <cm0+0x67>
	UCSR0B |= 0x40; //송신완료 인터럽트 활성화
 184:	56 9a       	sbi	0x0a, 6	; 10
 186:	08 95       	ret

00000188 <main>:



int main(void)
{
	setup();
 188:	cf df       	rcall	.-98     	; 0x128 <setup>
    /* Replace with your application code */
	setOCRA(convertServoAngle(360));
 18a:	88 e4       	ldi	r24, 0x48	; 72
 18c:	97 e1       	ldi	r25, 0x17	; 23
 18e:	be df       	rcall	.-132    	; 0x10c <setOCRA>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 190:	2f e7       	ldi	r18, 0x7F	; 127
 192:	88 e3       	ldi	r24, 0x38	; 56
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	21 50       	subi	r18, 0x01	; 1
 198:	80 40       	sbci	r24, 0x00	; 0
 19a:	90 40       	sbci	r25, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <main+0xe>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0x18>
 1a0:	00 00       	nop

	
    while (1) 
    {
		_delay_ms(25);
		uartTx('a');
 1a2:	81 e6       	ldi	r24, 0x61	; 97
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	d4 df       	rcall	.-88     	; 0x150 <uartTx>
		
		stack++;
		stack%=2;
 1a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1ac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	81 70       	andi	r24, 0x01	; 1
 1b4:	90 78       	andi	r25, 0x80	; 128
 1b6:	99 23       	and	r25, r25
 1b8:	24 f4       	brge	.+8      	; 0x1c2 <main+0x3a>
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	8e 6f       	ori	r24, 0xFE	; 254
 1be:	9f 6f       	ori	r25, 0xFF	; 255
 1c0:	01 96       	adiw	r24, 0x01	; 1
 1c2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1ca:	e2 cf       	rjmp	.-60     	; 0x190 <main+0x8>

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
